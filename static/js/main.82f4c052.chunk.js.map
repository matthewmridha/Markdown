{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","renderer","Renderer","link","href","text","document","body","addEventListener","classList","add","remove","App","props","state","input","placeholder","previewMax","editorMax","handleChange","bind","onClear","onReset","onEditorMax","onPreviewMax","event","this","setState","target","value","CLASSES","faCompressArrowsAlt","faExpandArrowsAlt","className","id","onClick","icon","onChange","React","Component","Editor","Preview","dangerouslySetInnerHTML","__html","Footer","rel","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAqBAA,IAAOC,WAAW,CAChBC,QAAS,IAKX,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,GAC9B,MAAM,4BAAN,OAAmCD,EAAnC,aAA4CC,EAA5C,WAMFC,SAASC,KAAKC,iBAAkB,aAAa,WAC3CF,SAASC,KAAKE,UAAUC,IAAK,iBAE/BJ,SAASC,KAAKC,iBAAkB,WAAW,WACzCF,SAASC,KAAKE,UAAUE,OAAQ,iB,IAS5BC,E,YACJ,WAAaC,GAAS,IAAD,8BACnB,4CAAOA,KACFC,MAAQ,CACXC,MAAOC,EACPC,YAAY,EACZC,WAAW,GAEb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBACf,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBACnB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBAXD,E,0EAaRK,GACXC,KAAKC,SAAS,CACZZ,MAAOU,EAAMG,OAAOC,U,gCAKtBH,KAAKC,SAAS,CACZZ,MAAO,O,gCAKTW,KAAKC,SAAS,CACZZ,MAAOC,M,oCAKTU,KAAKC,SAAS,CACZT,WAAYQ,KAAKZ,MAAMI,c,qCAKzBQ,KAAKC,SAAS,CACZV,YAAaS,KAAKZ,MAAMG,e,+BAO1B,IAAMa,EAAUJ,KAAKZ,MAAMI,UACrB,CACE,kBACA,mBACAa,KACEL,KAAKZ,MAAMG,WACf,CACE,mBACA,kBACAc,KAEF,CACE,cACA,cACAC,KAGR,OACE,yBAAKC,UAAU,aAIb,yBAAKA,UAAU,UACb,gCACE,oDAMJ,yBAAKA,UAAU,WAIb,yBAAKA,UAAYH,EAAQ,IAIvB,yBAAKG,UAAU,WACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,aAAd,WAEF,yBAAKA,UAAU,gBACb,4BAAQC,GAAG,UACTD,UAAU,MACVE,QAAUT,KAAKL,SAFjB,SAKA,4BACEa,GAAG,UACHD,UAAU,MACVE,QAAST,KAAKJ,SAHhB,SAMA,4BACEW,UAAU,UACVE,QAAUT,KAAKH,aACf,kBAAC,IAAD,CAAiBa,KAAMN,EAAQ,QAOrC,kBAAC,EAAD,CACEf,MAAUW,KAAKZ,MAAMC,MACrBsB,SAAaX,KAAKP,gBAMtB,yBAAKe,GAAG,UAAUD,UAAYH,EAAQ,IAIpC,yBAAKG,UAAU,WACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,aAAd,YAEF,yBAAKA,UAAU,gBACb,4BACEA,UAAU,UACVE,QAAYT,KAAKF,cACf,kBAAC,IAAD,CAAiBY,KAAON,EAAQ,QAOxC,kBAAC,EAAD,CACEf,MAAUW,KAAKZ,MAAMC,UAI3B,kBAAC,EAAD,W,GA/IUuB,IAAMC,WAyJlBC,EAAS,SAAE3B,GACb,OACE,8BACEqB,GAAG,SACHL,MAAUhB,EAAME,MAChBsB,SAAaxB,EAAMwB,YAQrBI,EAAU,SAAE5B,GACd,OACE,yBACEqB,GAAG,UACHQ,wBAA2B,CACzBC,OAAQ7C,IAAQe,EAAME,MAAO,CAAEd,SAAUA,QAM7C2C,EAAS,WACb,OACE,sDACqB,uBAAGxC,KAAK,qCAAqCwB,OAAO,SAASiB,IAAI,uBAAjE,eASnB7B,EAAW,8qCAkDFJ,ICnRKkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9C,SAAS+C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.82f4c052.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport marked from \"marked\";\n// eslint-disable-next-line no-unused-vars\nimport { faExpandArrowsAlt } from \"@fortawesome/free-solid-svg-icons\";\n// eslint-disable-next-line no-unused-vars\nimport { faCompressArrowsAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\n/* \nTakes text input in the editor section;\ndisplays given text after marking it down in th preview section.\n\\\\\\ MARKED : https://github.com/markedjs/marked ///\n\\\\\\ SANITIZER : https://github.com/cure53/DOMPurify ///\n*/\n\n/////\\\\\\\\\\ MARKED SETTINGS /////\\\\\\\\\\\n\n// Allows for line break on press enter for marked text\n\nmarked.setOptions({\n  breaks : true\n});\n\n// Links open in new tab\n\nconst renderer = new marked.Renderer();\nrenderer.link = function( href, text ) {\n  return `<a target=\"_blank\" href=\"${href}\">${text} \"</a>`;\n};\n\n// Hides blue focus ring (\"body.usingMouse\");\n// Detects tab press and brings back focus ring for accessibility (\":focus\")\n\ndocument.body.addEventListener( \"mousedown\", function() {\n  document.body.classList.add( \"usingMouse\" );\n});\ndocument.body.addEventListener( \"keydown\", function() {\n  document.body.classList.remove( \"usingMouse\" );\n});\n\n/////\\\\\\\\\\ MAIN /////\\\\\\\\\\\n\n// Root component manages all states(input,),\n// runs sanitize on input,\n// sends props to and renders components.\n\nclass App extends React.Component {\n  constructor( props ) {\n    super( props );\n    this.state = {\n      input: placeholder,\n      previewMax: false,\n      editorMax: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.onClear = this.onClear.bind(this);\n    this.onReset = this.onReset.bind(this);\n    this.onEditorMax = this.onEditorMax.bind(this);\n    this.onPreviewMax = this.onPreviewMax.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  ///* sets state.input and editor to empty *///\n  onClear() {\n    this.setState({\n      input: \"\"\n    });\n  }\n  ///* sets state.input and editor back to default placeholder text *///\n  onReset() {\n    this.setState({\n      input: placeholder\n    });\n  }\n  ///* changes boolean state of state.editorMax to expand or contract the editor *///\n  onEditorMax() {\n    this.setState({\n      editorMax: !this.state.editorMax\n    });\n  }\n  ///* changes boolean state of state.previewMax to expand or contract the previewer *///\n  onPreviewMax() {\n    this.setState({\n      previewMax: !this.state.previewMax\n    });\n  }\n  render() {\n    \n    /* toggles classes to allow maximizing and resetting elements */\n    \n    const CLASSES = this.state.editorMax ? \n          [\n            \"DisplayArea max\",\n            \"DisplayArea hide\",\n            faCompressArrowsAlt\n          ] : this.state.previewMax ?\n          [\n            \"DisplayArea hide\",\n            \"DisplayArea max\",\n            faCompressArrowsAlt\n          ] :\n          [\n            \"DisplayArea\",\n            \"DisplayArea\",\n            faExpandArrowsAlt\n          ]\n    \n    return (\n      <div className=\"container\">\n        \n        {/* HEADER */}\n        \n        <div className=\"header\">\n          <header>\n            <h1>Markdown Previewer</h1>\n          </header>\n        </div>\n        \n        {/* FLEX WRAP */}\n        \n        <div className=\"FlexBox\">\n          \n          {/* EDITOR SECTION */}\n          \n          <div className={ CLASSES[0] }>\n            \n            {/* TOOLBAR */}\n            \n            <div className=\"ToolBar\">\n              <div className=\"ToolBarLeft\">\n                <h3 className=\"SubHeader\">Editor</h3>\n              </div>\n              <div className=\"ToolBarRight\">\n                <button id=\"CLR-BTN\" \n                  className=\"Btn\" \n                  onClick={ this.onClear }>\n                  clear\n                </button>\n                <button \n                  id=\"RST-BTN\" \n                  className=\"Btn\" \n                  onClick={this.onReset}>\n                  reset\n                </button>\n                <button \n                  className=\"SizeBtn\" \n                  onClick={ this.onEditorMax }>\n                  <FontAwesomeIcon icon={CLASSES[2]} />\n                </button>\n              </div>\n            </div>\n            \n            {/* CONTENT */}\n            \n            <Editor \n              input = { this.state.input } \n              onChange = { this.handleChange } \n            />\n          </div>\n          \n          {/* PREVIEW SECTION */}\n          \n          <div id=\"Preview\" className={ CLASSES[1] }>\n            \n            {/* TOOLBAR */}\n            \n            <div className=\"ToolBar\">\n              <div className=\"ToolBarLeft\">\n                <h3 className=\"SubHeader\">Preview</h3>\n              </div>\n              <div className=\"ToolBarRight\">\n                <button \n                  className=\"SizeBtn\"\n                  onClick = { this.onPreviewMax } >\n                    <FontAwesomeIcon icon={ CLASSES[2] }/> \n                </button>\n              </div>\n            </div>\n            \n            {/* CONTENT */}\n            \n            <Preview \n              input = { this.state.input } \n            />\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  };\n};\n\n// Editor component takes input in text area,\n// sends input to Root\n// displays input state from Root.\n\nconst Editor = ( props ) => {\n    return (\n      <textarea\n        id=\"editor\"\n        value = { props.input }\n        onChange = { props.onChange }\n      />\n    );\n}\n\n// Preview component takes sanitized and marked output prop from Root,\n// displays output prop as rendered HTML\n\nconst Preview = ( props ) => {\n    return (\n      <div\n        id=\"preview\"\n        dangerouslySetInnerHTML = {{\n          __html: marked( props.input, { renderer: renderer } )\n        }}\n      />\n    );\n};\n\nconst Footer = () => {\n  return (\n    <footer>\n      Marking function : <a href=\"https://github.com/markedjs/marked\" target=\"_blank\" rel=\"noopener noreferrer\">marked.js</a>\n    </footer>\n\n  )\n};\n\n\n// Placeholder for initial state.\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}